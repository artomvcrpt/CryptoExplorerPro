import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests

class CryptoExplorerPro:
    def __init__(self, api_url: str):
        self.api_url = api_url
        self.data = pd.DataFrame()

    def fetch_historical_data(self, symbol: str, interval: str, start_time: str, end_time: str) -> pd.DataFrame:
        """
        Fetch historical cryptocurrency data.
        """
        url = f"{self.api_url}/api/v3/klines"
        params = {
            'symbol': symbol,
            'interval': interval,
            'startTime': start_time,
            'endTime': end_time
        }
        response = requests.get(url, params=params)
        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            return df
        else:
            print(f"Error fetching historical data: {response.status_code}")
            return pd.DataFrame()

    def fetch_real_time_data(self, symbol: str) -> dict:
        """
        Fetch real-time cryptocurrency data.
        """
        url = f"{self.api_url}/api/v3/ticker/price"
        params = {'symbol': symbol}
        response = requests.get(url, params=params)
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"Error fetching real-time data: {response.status_code}")
            return {}

    def analyze_price_trends(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Analyze price trends from historical data.
        """
        df['close'] = pd.to_numeric(df['close'], errors='coerce')
        df['moving_average'] = df['close'].rolling(window=20).mean()
        df['price_change'] = df['close'].pct_change()
        trend_data = df[['close', 'moving_average', 'price_change']]
        return trend_data

    def visualize_price_trends(self, df: pd.DataFrame):
        """
        Visualize price trends and moving averages.
        """
        plt.figure(figsize=(14, 7))
        plt.plot(df.index, df['close'], label='Close Price')
        plt.plot(df.index, df['moving_average'], label='20-period Moving Average', linestyle='--')
        plt.title('Cryptocurrency Price Trends')
        plt.xlabel('Date')
        plt.ylabel('Price')
        plt.legend()
        plt.grid(True)
        plt.show()

    def visualize_price_changes(self, df: pd.DataFrame):
        """
        Visualize percentage changes in price.
        """
        plt.figure(figsize=(14, 7))
        sns.lineplot(data=df, x=df.index, y='price_change')
        plt.title('Cryptocurrency Price Change')
        plt.xlabel('Date')
        plt.ylabel('Price Change (%)')
        plt.grid(True)
        plt.show()

# Example usage
if __name__ == "__main__":
    api_url = 'https://api.binance.com'

    crypto_explorer_pro = CryptoExplorerPro(api_url)
    
    # Fetch historical data
    symbol = 'BTCUSDT'
    interval = '1d'  # 1 day interval
    start_time = '1609459200000'  # Example start time in milliseconds (Jan 1, 2021)
    end_time = '1672531200000'    # Example end time in milliseconds (Jan 1, 2023)
    
    historical_data = crypto_explorer_pro.fetch_historical_data(symbol, interval, start_time, end_time)
    
    # Analyze and visualize historical data
    if not historical_data.empty:
        price_trends = crypto_explorer_pro.analyze_price_trends(historical_data)
        crypto_explorer_pro.visualize_price_trends(price_trends)
        crypto_explorer_pro.visualize_price_changes(price_trends)
    
    # Fetch real-time data
    real_time_data = crypto_explorer_pro.fetch_real_time_data(symbol)
    if real_time_data:
        print("Real-time Data:", real_time_data)
